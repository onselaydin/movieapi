sondaki nokta bulunduğu klasöre kopyala demek....
PS C:\movieapi> git clone https://github.com/onselaydin/movieapi.git .

Hangi dosyalar yeni yada değişiklik yapıldı gösterir
PS C:\movieapi> git status

bütün dosyaları versiyon kontrolüne eklemek
PS C:\movieapi> git add .

git epostamızı  tanıtma
PS C:\movieapi> git config --global user.email "onselaydin@gmail.com"

dosyalarımızı gite eklemek
PS C:\movieapi> git commit -m "not text dosyası ekledik."

gite gönderme
PS C:\movieapi> git push origin master

gitten projenin son halini almak
git pull origin master

.gitignore dosyası klasör için .idea/*     dosya için web.config*

--pull ile gelezse--
git fetch origin master
git reset --hard FETCH_HEAD

--branch--
Yeni branch oluşturmak
git branch skt_kontrol

Yeni branch oluşturmak ve aktif etmek
git checkout -b skt_kontrol
git push -u origin skt_kontrol   (remote yapıyoruz)

Branch Listesi
git branch

istenilen branch aktiv etmek
git checkout master

senaryo
git checkout skt_kontrol
git push -u origin skt_kontrol
** Dosyada değişiklikleri yap **
git commit -am "create skt method"
git checkout master
git merge skt_kontrol


>node -v
--nodemon kullanımı--
Herhangi değişiklik yapıldığında restart
- >npm install nodemon -g   (önce kuruyoruz.)

--Bir html dosyası sunmak--
serve-html.js dosyası ekle
const http = require('http');
const fs = require('fs');
const server = http.createServer((request, response) => {
    console.log('Bir istekte bulunuldu');
    response.writeHead(200, {'content-type':'text/html; charset=utf-8' });
    fs.ReadFile('index.html',(err, data) => {
        if(err)
            throw err;
        response.end(data);
    });
});
server.listen(3001);
> nodemon serve-html.js  diyerek serverımızı çalıştırıyoruz.


https://mlab.com/home
mongodb://movie_user:abcd1234@ds213645.mlab.com:13645/movieapi

Mongo komutları
>mongo --version
>mongo komutu ile komut satırına girilir.
>show dbs  -- veritabanlarını listeler.
>use vertabanım --veritabanını seçili hale getirir
>show collection -- tabloları listeliyor.
RoboMongo -- mongodb yönetim arayüzü

RestApi için (express(get,post,put,delete için))
https://medium.com/@berkekurnaz/node-js-express-ve-mongodb-i%CC%87le-restful-api-yazmak-62643b8bcceb
https://stackoverflow.com/questions/58213106/how-do-i-use-express-generator-to-make-node-skeleton-for-html-view-engine
- Proje Klasörü aç
- >npm init -y // bu bizim package.json dosyamısı oluşturur
- >npm install express --save   (node module klasörüne kaydetmek için) //varolan bir proje içine dahil etmek için.
- >npm install express -g (global kurmak için kullanılır.)
- >npm install express-generator -g   //express kurulumu
- >npm install body-parser --save    (json parse için)
- >express -v ejs
- >npm install
PS C:\expresstest> npm start
--yeni bir express projesi oluşturmak için uygulamakalsoru>express myapp
    yada uygulamaklasrou>express .

--projedeki paketleri güncellemek--
> npm outdated 
>npm update --save/--save-dev -f

--bcrypt
www.npmjs.com/package/bcrypt

--json web token
www.jwt.io
npm install jsonwebtoken

--test için mocha
npm install --global mocha
chaijs.com
npm install mocha chai chai-http --save-dev

npm install --global mocha
https://stackoverflow.com/questions/56199111/visual-studio-code-cmd-error-cannot-be-loaded-because-running-scripts-is-disabl
proje içindeylen c:\proje>mocha yazarak testler çalıştırılır.

https://www.npmjs.com/package/node-xlsx
npm install node-xlsx --save

---HEROKU---
uygulama scale etmek için(sunucu yönetimi)
www.heroku.com
document linkinden windows cli indir kur
cli a girip $ heroku login ile giriş yap

heroku create
git remote

package da aşağıdaki değişiği yaptık. Artık localimde
uygulamayı çalıştırırken npm start:dev demem gerekiyor.
ilk satır ise heroku için.

"start": "node ./bin/www",
"start:dev": "nodemon ./bin/www",

herokuya deploy yapmadan önce git e push yap
PS C:\movieapi> git push heroku master
siteyi açmak için aşağıdaki komut yada orda yazan link
c:\movieapi>heroku open 

==Travis CI==
CI ( contunious integration)
uygulama yazılıp buil ve test sonuçlarının developera kadar iletilmesi
CD (contunious delivery) 
uygulama yazıldı build edildi test sonuçları yazılımcıya gitti testler
başarılı ise deploy edildi 
https://travis-ci.org
github ile üye ol. Repolar geliyor.
projende .travis.yml dosyası oluştur.
dosya içeriği ile ilgili bir çok ayar var travis dökümanlarından temin edilebilir.

https://oncellmovie.herokuapp.com/

https://api.travis-ci.org/onselaydin/movieapi.svg

--digitalocean.com--
ssh roo@ip
sudo 
wwww altında git clone repo linki ile nodejs uygulamamızı aldık
nodejs uygulamasını sürekli açık tutmak için
--PM2--
https://www.npmjs.com/package/pm2
npm install -g pm2   -- global olarak pm2 yu kurduk.
pm2 start bin/www  --- uygulamayı çalıştırır.
pm2 stop www --uygulamayı durdurur.
pm2 restart www --uygulamayı yeniden başlatır.
pm2 monit --- uygulamayı izlemek için
pm2 logs --- tutulan logları gösteriyor.

---nginx reverse proxy---
linuxda kurulum
# sudo apt-get install nginx
ayarlar için örneğin 3000 portunu 80 e yönlendirmek için
# sudo vi /etc/nginx/sites-available/default
vi editorunde de bişey yazmak için (i) harfini kullan
dd yaparsak satır siler, inserted çıkmak için esc
kaydetmek için : wq
location satırına geliyoruz.

--load balace --vagrant---
mehmetseven.net/nginx-ve-nodejs-ile-load-balancing
www.ctl.io/inages/load-balancing.png
	
00086816124317925102


Timer timer = new Timer();
timer.Interval = 300000;
timer.Elapsed += TimerOnElapsed;
timer.Start();

private void TimerOnElapsed(object sender, ElapsedEventArgs elapsedEventArgs)
{
	// Do stuff
}


--basit bir routing yapısı--

if(request.method ==="GET"){
    if(request.url ==='/')
        response.write("indexteyiz");
    else if (request.url === "/iletisim")
        response.write("iletişimdeyiz.");
    else  
        response.write("bu sayfa bulunamadı");
}


------------read-stream.js
const fs= require('fs');
const file = require('video.mp4');
const readStream = fs.createReadStream(file);
let progress=0;
fs.stat(file,(err,data)=>{
    const total = data.size;
    console.log(total);
});
readStream.on('data', (chunk) => {
    console.log('bir veri geldi')
    progress += chunk.lenght;
});
readStream.on('end', (chunk) => {
    console.log('okuma bitti');
    console.log(progress);
});

///------------------------express kurulumu
npm install express --save  //bu package.json oluşturacak ve içine ekleyecek.
expresstest.js dosyası oluştur içine alttakini yapıştır
const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('express')
});

app.listen(3000,()=> {
    console.log("express çalıştı");
});

çalıştırmak için
$ nodemon expresstest.js

yeni klasör aç içine gir >express .   komutunu çalıştır. > npm install ile olmayan paketleri kur.
package.json dosyasondaki start satırındaki node u nodemon yap. >npm start ile projeyi çalıştır.
npm start yaptıktan sonra DeprecationWarning lere dikkat et bir pass option varsa ekle...
örneğin mongoose.connect('mongodb://10.16.15.89/LOS',{ useNewUrlParser: true, useUnifiedTopology:true })
useNewUrlParser ve useUnifiedTopology sonradan ekledim.

npm install mongodb den sonra app.js e var mongoose = require('mongoose'); referans et.
www dosyasında sucunu bilgileri var post vs.

--Event Emiter Sınıfını Kullanmak--
//eventlistener.js dosyası oluştur içine aşağıdaki kodları ekle
var events = require("events");
var EventEmitter = new events.EventEmitter();

EventEmitter.on("yeniolay", function(){
    console.log("olay tetiklendi");
});

EventEmitter.emit("yeniolay");

çalıştırmak için >node eventlistener.js

--IO işlemleri--
bir io.js isimli dosya oluştur
console.log(__filename); //doyanın yolunu ve adını döndürür.
console.log(__dirname); // dosyanın yolunu döndürür.

var path = require("path");
var dosya = "c:\klasor\blabla.txt";

var dosyaadi= path.basename(dosya);
console.log("dosya adi: " + dosyaadi);

var dosyauzantisi = path.extname(dosya);
console.log("dosya uzantisi" + dosyauzantisi);

--------------dosya okuma fs modülü-------------
var fs = require("fs");
fs.readFile("birdosya.txt", function(err, data){
    if(err){ console.error(err) }
    else { console.log("readFile ile asenkron erişim:" + data.toString());}
});

var data = fs.readFileSync("birdosya.txt");
console.log("dosyaya senkton erişim:" + data.toString());

---yeni dosya oluşturmak---
var fs = require("fs");
fs.open("birdosya.txt", "r+", function(err, fd){
    if(err) { console.err(err); }
    else { console.log("dosya oluşturuldu"); }
});

--http hataları--
1xx -- bilgi
2xx -- başarı
3xx -- yönlendirmek
4xx -- istemci hatası
5xx -- sunucu hatası

--express--
>express biruygulamaadi
>cd biruygulamaadi
>npm install
>npm list
>npm start --çalıştır.

--mongo sorgular--
db.collection.find().sort({ soyad : 1 }); //a-z listeler
db.collection.find().sort({ soyad : -1 }); //z-a listeler
db.collection.find().sort({ soyad : 1, ad: -1 }); //z-a listeler
db.collection.find().limit(1); // sql deki top 1
db.collection.update({ ad: 'Ali'},{ $set: { dogumTarihi: 1975 }} ); //adı Ali olanların dogumtarihini 1975 yapar.
db.collection.remove({ ad: 'Ali' }); // ali olan dökümanları sil sqldeki satırları(row)
db.collection.renameCollection("testCollection");

--mongoose işlem yönetmleri--
Model.findById(obj._Id, function(err, doc){
    //_id ile sorgulamak için
});

Model.Count(conditions, callback); //döküöan sayısı
Model.remove
Model.distinct
Model.update(conditions, update, options, callback);
--Karmaşık veritabanı sorgusu örneği--
Model
    .where('age').gte(25)
    .where('tags').in(['movie','music','art'])
    .select('name','age','tags')
    .skip(20)
    .limit(10)
    .asc('age')
    .slaveOk()
    .hint({ age: 1, name: 1 })
    .exec(callback);

Not: nodemon alternatif supervisor  > npm install supervisor --save

https://mongoosejs.com/docs/schematypes.html

mongoose 
https://stackoverflow.com/questions/35080689/getting-an-empty-response-returned-from-nodejs-express
<<<<<<< HEAD


--REDİS--
Session Store olarak tercih edilebilir.
https://redis.io/  in-memory storage
https://github.com/microsoftarchive/redis/releases
Redis -- in memory, database, cache, message broker. isviçre çakısı gibi.
# apt-get install redis-server  //kurulum
# redis-cli ping  //test
redise yazdığımız verileri görmek için https://tableplus.com
tableplus aynı zamanda postgressql içinde kullanılır.

https://github.com/meseven/arduino-nodejs-egitimi/tree/c98aed72a4516073b9ae895f0e4d0ba2e677d1ef/location-tracking
https://github.com/mcollina/mosca/wiki

# npm i redis mosca --save
# killall node // tüm node proseslerini öldürür.
# redis-cli monitor  
https://github.com/meseven/arduino-nodejs-egitimi/tree/14b6422638a44800a32f237a1473fd8a45d5c6d2/location-tracking
# wscat -c ws://localhost:3000 // bağlantı testi....

npm install express-session --save //session oluşturmak için app içine referans et.
npm install connect-redis --save //redise bağlanmak için
https://github.com/tj/connect-redis


--dotenv--
örneğin connction string,google keyler benzeri sabit değişkenleri bu dosyada tutacağız.
# npm install dotenv --save
app.js içine ekle 
const dotenv = require('dotenv');
dotenv.config();
Projenin ana dizinine .env isimli bir dosya oluştur.
dosyanın içine örneğin NAME = onsel ve yagmur
Kullanmak için istediğin bir sayfada
    console.log(process.env.NAME)
git yada github kullanıyorsak dosya servera gitmemesi için .gitignore dosyasındaa boş bir yerde .env olarak ekle

--lodash--
dizilerde sıralama, arama
https://lodash.com/
# npm install lodash --save
kullanmak istediğin sayfada tanımla.
const _ = require('lodash');
örnek: _.orderBy(testarrayi,'alanim','asc');

--Bower--
Frontend bağımlılık yönetim aracı...
https://www.youtube.com/watch?v=UhxGUaTm9RA&t=102s
bowerı projemizde etkinleştirmek.
# bower init
# bower install angular --save

--Asyn / Await Yapısı --
https://www.gencayyildiz.com/blog/ecmascript-6-async-await-keywordleri/


-- Module Kullanımı --
örnek: 
module.js
    function foo() {
        return 'bla bla';
    }
    module.exports = foo;
index.js
    const foo = require('./modul');
    console.log(foo());

--------------------
chrome://inspect/#devices


-- Hata Yönetimi ve Loglama --
npm install winston --save
npm install winston-redis --save


--express ile api--
klasör aç içine gir 
>express .
>npm install
>npm start
=======
>>>>>>> fc678160ffe4fe69049da2e25a04ecc2ca7de5a0
